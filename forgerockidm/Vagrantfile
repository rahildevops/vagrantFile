# -*- mode: ruby -*-
# vi: set ft=ruby :

def read_properties(file_path)
  properties = {}
  File.foreach(file_path) do |line|
    next if line.strip.empty? || line.start_with?('#') # Skip comments and empty lines
    key, value = line.strip.split('=', 2)
    properties[key] = value
  end
  properties
end

# Path to the properties file
properties_file = File.expand_path("config.properties", __dir__)

# Read the properties file and store the result in the `properties` variable
properties = read_properties(properties_file)

# Access variables from the properties file
#server details
idm_hostname = properties['idm_hostname']
idm_server_cpu = properties['idm_server_cpu']
idm_server_memory = properties['idm_server_memory']
software_folder_local = properties['software_folder_local']
software_folder_server = properties['software_folder_server']
idm_ip_address = properties['idm_ip_address']

#folder structure 
download_location = properties['download_location']
install_locaion = properties['install_locaion']
tmp_location = properties['tmp_location']


#Binaries
idm_version = properties['idm_version']



# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/jammy64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
   config.vm.network "private_network", ip: idm_ip_address

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
   config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder software_folder_local, software_folder_server
  config.vm.hostname = idm_hostname


  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = idm_server_memory
     vb.cpus   = idm_server_cpu
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     sudo apt update -y
     sudo apt-get install openjdk-17-jdk -y
     sudo apt install unzip -y
     sudo mkdir -p #{install_locaion} 
     sudo unzip #{download_location}IDM-#{idm_version}.zip -d #{install_locaion}
     sudo sed -i 's/^openidm.host=.*/openidm.host=#{idm_hostname}/' #{install_locaion}openidm/resolver/boot.properties
     sudo export OPENIDM_OPTS="-Xms4096m -Xmx4096m"
     sudo nohup /app/forgerock/install/openidm/startup.sh   > logs/console.out 2>&1&
     sudo sleep 60
     sudo /app/forgerock/install/openidm/shutdown.sh  
     sudo cp #{download_location}openidm.service /etc/systemd/system/
     sudo systemctl enable openidm
     sudo systemctl start openidm
   SHELL
end
