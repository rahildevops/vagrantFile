# -*- mode: ruby -*-
# vi: set ft=ruby :

def read_properties(file_path)
  properties = {}
  File.foreach(file_path) do |line|
    next if line.strip.empty? || line.start_with?('#') # Skip comments and empty lines
    key, value = line.strip.split('=', 2)
    properties[key] = value
  end
  properties
end

# Path to the properties file
properties_file = File.expand_path("config.properties", __dir__)

# Read the properties file and store the result in the `properties` variable
properties = read_properties(properties_file)


#Reading Server details
platform_ip_address = properties['platform_ip_address']
software_folder_local = properties['software_folder_local']
software_folder_server = properties['software_folder_server']
server_cpu = properties['server_cpu']
server_memory = properties['server_memory']
sleep_time = properties['sleep_time']
sleep_time_long = properties['sleep_time_long']


#Directories to be used for deployment.
install_location = properties['install_locaion']
secret_location = properties['secret_location']
tmp_location = properties['tmp_location']
ldap_instance = properties['ldap_instance']
am_instance = properties['am_instance']



#Software versions
ig_version = properties['ig_version']
idm_version = properties['idm_version']
tomcat_version = properties['tomcat_version']
am_version = properties['am_version']
ds_version = properties['ds_version']

#Secrets 
DS_Deployment_password = properties['DS_Deployment_password']
Secret_file = properties['secret_file'] 
DS_admin_password = properties['DS_admin_password']  
DS_client_password = properties['DS_client_password']
am_trust_store = properties['am_trust_store']
am_trust_store_password = properties['am_trust_store_password']



#Hostnames
DS_hostname = properties['DS_hostname']

#ldap config details
Admin_port = properties['Admin_port']
Ldap_port = properties['Ldap_port']
Ldaps_port = properties['Ldaps_port']

# Access variables from the properties file
#server details
idm_hostname = properties['idm_hostname']
idm_server_cpu = properties['idm_server_cpu']
idm_server_memory = properties['idm_server_memory']
software_folder_local = properties['software_folder_local']
software_folder_server = properties['software_folder_server']
idm_ip_address = properties['idm_ip_address']

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/jammy64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
   config.vm.network "private_network", ip: platform_ip_address

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
   config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
   config.vm.synced_folder software_folder_local, software_folder_server

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = server_memory
     vb.cpus  =  server_cpu
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
  ##################JAVA INSTALLATION ############################
  echo we will not be intalling java
  sudo apt update -y
  sudo apt-get install openjdk-17-jdk -y
  echo java installation completed!!!
  sleep #{sleep_time}
  ##################UNZIP INSTALLATION ############################
  sudo apt install unzip -y
  echo unzip installation completed!!!
  sleep #{sleep_time}

  ###################Adding entries to host file###################
  # 1. taking backup of the existing host file
    sudo cp /etc/hosts /etc/hosts.bak
  # 2. Add custom entries to /etc/hosts
   sudo echo "127.0.0.1    admin.example.com" | sudo tee -a /etc/hosts
   sudo echo "127.0.0.1    am.example.com" | sudo tee -a /etc/hosts
   sudo echo "127.0.0.1    directory.example.com" | sudo tee -a /etc/hosts
   sudo echo "127.0.0.1    enduser.example.com" | sudo tee -a /etc/hosts
   sudo echo "127.0.0.1    login.example.com" | sudo tee -a /etc/hosts
   sudo echo "127.0.0.1    openidm.example.com" | sudo tee -a /etc/hosts
   sudo echo "127.0.0.1    platform.example.com" | sudo tee -a /etc/hosts  
  ##################Creating Directory Structure #################
  mkdir -p #{install_location}  #{install_location}tomcat #{secret_location} #{tmp_location} #{ldap_instance} #{am_instance}

  ##################Installing Directory Server #################
  #1. Unzip the ds binaries
  unzip -q #{software_folder_server}DS-#{ds_version} -d #{install_location}
  #2. creating deployment descriptor
  deployment_Secret=$(#{install_location}opendj/bin/dskeymgr create-deployment-id --deploymentIdPassword #{DS_Deployment_password})
  #3. String deployment secret in a file.
  echo deployment_secrert=${deployment_Secret}  >> #{secret_location}#{Secret_file}
  #4. Installing DS Server.
  echo starting to install DS Server !!!!!
  #{install_location}opendj/setup \
 --deploymentId $deployment_Secret \
 --deploymentIdPassword #{DS_Deployment_password} \
 --rootUserDN uid=admin \
 --rootUserPassword #{DS_admin_password} \
 --monitorUserPassword #{DS_admin_password} \
 --hostname #{DS_hostname} \
 --adminConnectorPort #{Admin_port} \
 --ldapPort #{Ldap_port} \
 --enableStartTls \
 --ldapsPort #{Ldaps_port} \
 --profile am-config \
 --set am-config/amConfigAdminPassword:#{DS_client_password} \
 --profile am-cts \
 --instancePath #{ldap_instance} \
 --set am-cts/amCtsAdminPassword:#{DS_client_password} \
 --set am-cts/tokenExpirationPolicy:am-sessions-only \
 --profile am-identity-store \
 --set am-identity-store/amIdentityStoreAdminPassword:#{DS_client_password} \
 --profile idm-repo \
 --set idm-repo/domain:forgerock.io \
 --acceptLicense  >> /app/forgerock/tmp/ldapInstall.log
  #5. Creating the opendj systemctl file 
  sudo #{install_location}opendj/bin/create-rc-script --groupName rahil --userName rahil --systemdService /etc/systemd/system/opendj.service
  echo starting the ds ......
  sudo adduser --gecos "" --disabled-password rahil
  sudo chown -R rahil:rahil /app 
  sudo systemctl daemon-reload
  sudo systemctl start opendj
  echo installation of DS completed succesfully!!!!
  sudo sleep #{sleep_time_long}

  #6. Creating file to run DS as a service.
  sudo #{install_location}opendj/bin/create-rc-script --groupName rahil --userName rahil --systemdService /etc/systemd/system/opendj.service
  echo starting the ds ......
  sudo adduser --gecos "" --disabled-password rahil
  sudo chown -R rahil:rahil /app 
  sudo systemctl daemon-reload
  sudo systemctl stop opendj
  sudo sleep #{sleep_time_long}
  sudo systemctl start opendj
  sudo systemctl enable opendj
  ##############End of Director Server Installation#################
  ##################################################################

  ##################### Tomcat Installation ########################
  #1. Extract the tomcat binaries 
  sudo sleep #{sleep_time_long}
  tar -xf #{software_folder_server}apache-tomcat-#{tomcat_version}.tar.gz -C #{install_location}tomcat --strip-components=1
  
  #2. Creating a trust store for AM and importing the DS certificate to it
  sudo keytool -exportcert -keystore #{ldap_instance}config/keystore -storepass $(cat #{ldap_instance}config/keystore.pin) -alias ssl-key-pair -rfc -file #{secret_location}ds-cert.pem
  sudo keytool -import -file #{secret_location}ds-cert.pem -alias ds-cert -keystore #{secret_location}#{am_trust_store} -keypass #{am_trust_store_password}  -storepass  #{am_trust_store_password} -noprompt

  #3. Creating systemctl file for tomcat
  cat > /etc/systemd/system/tomcat.service <<EOF
  [Unit]
  Description= Apache Tomcat Web Application Container
  After=network.target
  [Service]
  Type=forking
  User=rahil
  Group=rahil
  Environment="JAVA_HOME=/usr/lib/jvm/java-1.17.0-openjdk-amd64"
  Environment="CATALINA_HOME=#{install_location}tomcat"
  Environment="CATALINA_PID=#{install_location}tomcat/temp/tomcat.pid"
  Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC -Djavax.net.ssl.trustStore=#{secret_location}#{am_trust_store} -Djavax.net.ssl.trustStorePassword=#{am_trust_store_password} -Djavax.net.ssl.trustStoreType=jks"
  ExecStart=#{install_location}tomcat/bin/startup.sh
  ExecStop=#{install_location}tomcat/bin/shutdown.sh
  [Install]
  WantedBy=multi-user.target 
EOF

  #4. Overidding the server.xml to change port to 8081
  sudo cp -f #{software_folder_server}/server.xml #{install_location}tomcat/conf/server.xml 

  #5. Start Tomcat 
  sudo chown -R rahil:rahil /app
  sudo systemctl daemon-reload
  sudo systemctl start tomcat
  sudo systemctl enable tomcat
  ################### End of Tomcat Installation####################
  ##################################################################




   SHELL
end
