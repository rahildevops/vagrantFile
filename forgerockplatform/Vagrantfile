# -*- mode: ruby -*-
# vi: set ft=ruby :

def read_properties(file_path)
  properties = {}
  File.foreach(file_path) do |line|
    next if line.strip.empty? || line.start_with?('#') # Skip comments and empty lines
    key, value = line.strip.split('=', 2)
    properties[key] = value
  end
  properties
end

# Path to the properties file
properties_file = File.expand_path("config.properties", __dir__)

# Read the properties file and store the result in the `properties` variable
properties = read_properties(properties_file)


#Reading Server details
platform_ip_address = properties['platform_ip_address']
software_folder_local = properties['software_folder_local']
software_folder_server = properties['software_folder_server']
server_cpu = properties['server_cpu']
server_memory = properties['server_memory']
sleep_time = properties['sleep_time']
sleep_time_long = properties['sleep_time_long']


#Directories to be used for deployment.
install_location = properties['install_locaion']
secret_location = properties['secret_location']
tmp_location = properties['tmp_location']
ldap_instance = properties['ldap_instance']
am_instance = properties['am_instance']
tools_location = properties['tools_location']



#Software versions
ig_version = properties['ig_version']
idm_version = properties['idm_version']
tomcat_version = properties['tomcat_version']
am_version = properties['am_version']
ds_version = properties['ds_version']
JAVA_HOME = properties['JAVA_HOME']
AM_CONFIGURATION_TOOL = properties['AM_CONFIGURATION_TOOL']
AM_CONFIGURATION_TOOL_JAR = properties['AM_CONFIGURATION_TOOL_JAR']


#Secrets 
DS_Deployment_password = properties['DS_Deployment_password']
Secret_file = properties['secret_file'] 
DS_admin_password = properties['DS_admin_password']  
DS_client_password = properties['DS_client_password']
am_trust_store = properties['am_trust_store']
am_trust_store_password = properties['am_trust_store_password']
am_password = properties['am_password']
openidm_client_secret = properties['openidm_client_secret']




#Hostnames
DS_hostname = properties['DS_hostname']
AM_hostname = properties['AM_hostname']


#ldap config details
Admin_port = properties['Admin_port']
Ldap_port = properties['Ldap_port']
Ldaps_port = properties['Ldaps_port']

#AM Configuration
sub_realm = properties['sub_realm']


# Access variables from the properties file
#server details
idm_hostname = properties['idm_hostname']
idm_server_cpu = properties['idm_server_cpu']
idm_server_memory = properties['idm_server_memory']
software_folder_local = properties['software_folder_local']
software_folder_server = properties['software_folder_server']
idm_ip_address = properties['idm_ip_address']

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/jammy64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
   config.vm.network "private_network", ip: platform_ip_address

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
   config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
   config.vm.synced_folder software_folder_local, software_folder_server

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = server_memory
     vb.cpus  =  server_cpu
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
 
  ##################JAVA INSTALLATION ############################
  echo we will not be intalling java
  sudo apt update -y
  sudo apt-get install openjdk-17-jdk -y
  echo java installation completed!!!
  sleep #{sleep_time}
  ##################UNZIP INSTALLATION ############################
  sudo apt install unzip -y
  echo unzip installation completed!!!
  sleep #{sleep_time}

  ###################Adding entries to host file###################
  # 1. taking backup of the existing host file
     sudo cp /etc/hosts /etc/hosts.bak
  # 2. Add custom entries to /etc/hosts
    sudo echo "127.0.0.1    admin.example.com" | sudo tee -a /etc/hosts
    sudo echo "127.0.0.1    am.example.com" | sudo tee -a /etc/hosts
    sudo echo "127.0.0.1    directory.example.com" | sudo tee -a /etc/hosts
    sudo echo "127.0.0.1    enduser.example.com" | sudo tee -a /etc/hosts
    sudo echo "127.0.0.1    login.example.com" | sudo tee -a /etc/hosts
    sudo echo "127.0.0.1    openidm.example.com" | sudo tee -a /etc/hosts
    sudo echo "127.0.0.1    platform.example.com" | sudo tee -a /etc/hosts  
  ##################Creating Directory Structure #################
   mkdir -p  #{tools_location} #{install_location}  #{install_location}tomcat #{secret_location} #{tmp_location} #{ldap_instance} #{am_instance}

  ##################Installing Directory Server #################
  #1. Unzip the ds binaries
  unzip -q #{software_folder_server}DS-#{ds_version} -d #{install_location}
  #2. creating deployment descriptor
  deployment_Secret=$(#{install_location}opendj/bin/dskeymgr create-deployment-id --deploymentIdPassword #{DS_Deployment_password})
  #3. String deployment secret in a file.
  echo deployment_secrert=${deployment_Secret}  >> #{secret_location}#{Secret_file}
  #4. Installing DS Server.
  echo starting to install DS Server !!!!!
 #{install_location}opendj/setup \
 --deploymentId $deployment_Secret \
 --deploymentIdPassword #{DS_Deployment_password} \
 --rootUserDN uid=admin \
 --rootUserPassword #{DS_admin_password} \
 --monitorUserPassword #{DS_admin_password} \
 --hostname #{DS_hostname} \
 --adminConnectorPort #{Admin_port} \
 --ldapPort #{Ldap_port} \
 --enableStartTls \
 --ldapsPort #{Ldaps_port} \
 --profile am-config \
 --set am-config/amConfigAdminPassword:#{DS_client_password} \
 --profile am-cts \
 --instancePath #{ldap_instance} \
 --set am-cts/amCtsAdminPassword:#{DS_client_password} \
 --set am-cts/tokenExpirationPolicy:am-sessions-only \
 --profile am-identity-store \
 --set am-identity-store/amIdentityStoreAdminPassword:#{DS_client_password} \
 --profile idm-repo \
 --set idm-repo/domain:forgerock.io \
 --acceptLicense  >> /app/forgerock/tmp/ldapInstall.log
  #5. Creating the opendj systemctl file 
  sudo #{install_location}opendj/bin/create-rc-script --groupName rahil --userName rahil --systemdService /etc/systemd/system/opendj.service
  echo starting the ds ......
  sudo adduser --gecos "" --disabled-password rahil
  sudo chown -R rahil:rahil /app 
  sudo systemctl daemon-reload
  sudo systemctl start opendj
  echo installation of DS completed succesfully!!!!
  sudo sleep #{sleep_time_long}

  #6. Creating file to run DS as a service.
  sudo #{install_location}opendj/bin/create-rc-script --groupName rahil --userName rahil --systemdService /etc/systemd/system/opendj.service
  echo starting the ds ......
  sudo adduser --gecos "" --disabled-password rahil
  sudo chown -R rahil:rahil /app 
  sudo systemctl daemon-reload
  sudo systemctl stop opendj
  sudo sleep #{sleep_time_long}
  sudo systemctl start opendj
  sudo systemctl enable opendj

  #7. Creating tools.properties file 
  touch /root/.opendj/tools.properties
  cat > /root/.opendj/tools.properties <<EOF
  hostname=ubuntu-jammy
  adminConnectorPort=#{Admin_port}
  ldapcompare.port=#{Ldaps_port}
  ldapdelete.port=#{Ldaps_port}
  ldapmodify.port=#{Ldaps_port}
  ldappasswordmodify.port=#{Ldaps_port}
  ldapsearch.port=#{Ldaps_port}
  bindDN=uid=admin
  bindPassword=#{DS_admin_password}
  useSsl=true
  trustAll=true 
EOF
  ##############End of Director Server Installation#################
  ##################################################################

  ##################### Tomcat Installation ########################
  #1. Extract the tomcat binaries 
  sudo sleep #{sleep_time_long}
  tar -xf #{software_folder_server}apache-tomcat-#{tomcat_version}.tar.gz -C #{install_location}tomcat --strip-components=1
  
  #2. Creating a trust store for AM and importing the DS certificate to it
  sudo keytool -exportcert -keystore #{ldap_instance}config/keystore -storepass $(cat #{ldap_instance}config/keystore.pin) -alias ssl-key-pair -rfc -file #{secret_location}ds-cert.pem
  sudo keytool -import -file #{secret_location}ds-cert.pem -alias ds-cert -keystore #{secret_location}#{am_trust_store} -keypass #{am_trust_store_password}  -storepass  #{am_trust_store_password} -noprompt

  #3. Creating systemctl file for tomcat
  cat > /etc/systemd/system/tomcat.service <<EOF
  [Unit]
  Description= Apache Tomcat Web Application Container
  After=network.target
  [Service]
  Type=forking
  User=rahil
  Group=rahil
  Environment="JAVA_HOME=/usr/lib/jvm/java-1.17.0-openjdk-amd64"
  Environment="CATALINA_HOME=#{install_location}tomcat"
  Environment="CATALINA_PID=#{install_location}tomcat/temp/tomcat.pid"
  Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC -Djavax.net.ssl.trustStore=#{secret_location}#{am_trust_store} -Djavax.net.ssl.trustStorePassword=#{am_trust_store_password} -Djavax.net.ssl.trustStoreType=jks"
  ExecStart=#{install_location}tomcat/bin/startup.sh
  ExecStop=#{install_location}tomcat/bin/shutdown.sh
  [Install]
  WantedBy=multi-user.target 
EOF

  #4. Overidding the server.xml to change port to 8081
  sudo cp -f #{software_folder_server}/server.xml #{install_location}tomcat/conf/server.xml 

  #5. Start Tomcat 
  sudo chown -R rahil:rahil /app
  sudo systemctl daemon-reload
  sudo systemctl start tomcat
  sudo systemctl enable tomcat
  ################### End of Tomcat Installation####################
  ##################################################################

  ###################Installation of AM ############################
  #1. stopping tomcat and cleanup of websapps folder 
  sudo systemctl stop tomcat
  sudo rm -rf  #{install_location}tomcat/webapps/*

  #2. unzip the am war file in the tmp directory and move to webapps folder
  sudo unzip -qq #{software_folder_server}/AM-#{am_version}.zip -d #{tmp_location}
  sudo cp #{tmp_location}openam/AM-#{am_version}.war #{install_location}tomcat/webapps/am.war
  sudo chown -R rahil:rahil /app
  sudo chown -R rahil:rahil /home/rahil
  sudo systemctl start tomcat
  sudo sleep 10

  #3. configuring AM
  sudo unzip -qq #{tmp_location}openam/#{AM_CONFIGURATION_TOOL} -d #{tools_location}config
  sudo echo "JAVA_HOME=#{JAVA_HOME}" >> /etc/environment
  sudo echo "export JAVA_HOME=#{JAVA_HOME}" >> /home/vagrant/.bashrc
  sudo source /etc/environment
  sudo cp #{software_folder_server}config.properties #{tools_location}config
  echo running jar for configuring AM... 
  java -jar #{tools_location}config/#{AM_CONFIGURATION_TOOL_JAR} -f #{tools_location}config/config.properties

  ###################Complete Installation of AM####################
  ##################################################################
  sudo sleep 10
  ###################Configuring AM for Platform ####################
  sudo apt-get update
  sudo apt-get install -y jq
  # 1. Wait for AM to be fully initialized
  #echo "Waiting for AM to be ready..."
  #while ! curl -s -o /dev/null -w "%{http_code}" http://#{AM_hostname}:8081/am/json/healthcheck | grep -q "200"; do
  #  sleep 5
  #  echo "Waiting for AM to be ready..."
  #done

  # 2. Log In as an Administrator (from Postman collection)
  echo "Authenticating as administrator..."
  ADMIN_TOKEN=$(curl -s -X POST \
    -H "X-OpenAM-Username: amadmin" \
    -H "X-OpenAM-Password: #{am_password}" \
    -H "Accept-API-Version: resource=2.1" \
    -H "Content-Type: application/json" \
    http://#{AM_hostname}:8081/am/json/realms/root/authenticate | jq -r '.tokenId')

  if [ -z "$ADMIN_TOKEN" ]; then
    echo "Failed to authenticate as administrator"
    exit 1
  fi

  echo "Admin token*****: $ADMIN_TOKEN"
  sudo sleep 10
  # 3. Add CTS External Store (from Postman collection)
  ################### CTS Configuration ####################
  echo "Configuring CTS external store..."
  ################### CTS Configuration ####################
  
  # Create a temporary file with the configuration
  cat > /tmp/cts_config.json <<EOF
{
  "amconfig.org.forgerock.services.cts.store.common.section": {
    "org.forgerock.services.cts.store.location": "external",
    "org.forgerock.services.cts.store.root.suffix": "ou=famrecords,ou=openam-session,ou=tokens",
    "org.forgerock.services.cts.store.max.connections": "100",
    "org.forgerock.services.cts.store.page.size": 0,
    "org.forgerock.services.cts.store.vlv.page.size": 1000
  },
  "amconfig.org.forgerock.services.cts.store.external.section": {
    "org.forgerock.services.cts.store.ssl.enabled": true,
    "org.forgerock.services.cts.store.mtls.enabled": false,
    "org.forgerock.services.cts.store.starttls.enabled": false,
    "org.forgerock.services.cts.store.directory.name": "#{DS_hostname}:#{Ldaps_port}",
    "org.forgerock.services.cts.store.loginid": "uid=openam_cts,ou=admins,ou=famrecords,ou=openam-session,ou=tokens",
    "org.forgerock.services.cts.store.password": "#{DS_client_password}",
    "org.forgerock.services.cts.store.heartbeat": 0,
    "org.forgerock.services.cts.store.affinity.enabled": true
  }
}
EOF

  # Apply the configuration
  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X PUT \
    -H "Content-Type: application/json" \
    -H "Cookie: iplanetDirectoryPro=$ADMIN_TOKEN" \
    -H "Accept-API-Version: resource=1.0" \
    -H "If-Match: *" \
    -d @/tmp/cts_config.json \
    http://localhost:8081/am/json/global-config/servers/server-default/properties/cts#1.0_update)

  # Verify the response
  if [ "$HTTP_STATUS" -eq 200 ]; then
    echo "CTS external store configuration successfully applied"
    rm -f /tmp/cts_config.json
  else
    echo "ERROR: Failed to configure CTS external store (HTTP $HTTP_STATUS)"
    echo "Check AM logs for details: /app/forgerock/tomcat/logs/amAuthentication.log"
    echo "Last configuration attempt saved at: /tmp/cts_config.json"
    exit 1
  fi

  # 2. Log In as an Administrator (from Postman collection)
  echo sleep 10
  echo "Authenticating as administrator..."
  ADMIN_TOKEN=$(curl -s -X POST \
    -H "X-OpenAM-Username: amadmin" \
    -H "X-OpenAM-Password: #{am_password}" \
    -H "Accept-API-Version: resource=2.1" \
    -H "Content-Type: application/json" \
    http://#{AM_hostname}:8081/am/json/realms/root/authenticate | jq -r '.tokenId')

  if [ -z "$ADMIN_TOKEN" ]; then
    echo "Failed to authenticate as administrator"
    exit 1
  fi

  echo "Admin token*****: $ADMIN_TOKEN"
  ################### Create SubRealm  ####################

 
  echo "Creating subrealm '#{sub_realm}'..."
  
  # Create JSON payload for realm creation
  cat > /tmp/create_realm.json <<EOF
{
  "name": "#{sub_realm}",
  "active": true,
  "parentPath": "/",
  "aliases": ["#{sub_realm}.example.com"]
}
EOF

  REALM_CREATE_URL="http://#{AM_hostname}:8081/am/json/global-config/realms"
  echo "Creating realm via POST to: $REALM_CREATE_URL"
  
  # Execute realm creation (removed _action parameter)
  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
    -H "Content-Type: application/json" \
    -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
    -H "Accept-API-Version: resource=1.0" \
    -d @/tmp/create_realm.json \
    "$REALM_CREATE_URL")

  if [ "$HTTP_STATUS" -eq 201 ]; then
    echo "Subrealm '#{sub_realm}' created successfully"
    rm -f /tmp/create_realm.json
  else
    echo "ERROR: Failed to create subrealm (HTTP $HTTP_STATUS)"
    echo "Response body:"
    curl -X POST \
      -H "Content-Type: application/json" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Accept-API-Version: resource=1.0" \
      -d @/tmp/create_realm.json \
      "$REALM_CREATE_URL"
    exit 1
  fi
 ## End of Code till realm creation###
 ## Begning of code to update the scope of ldap to SCOPE_ONE

 ##### Make the HTTP PUT request with proper line continuations
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realms/alpha/realm-config/services/id-repositories/LDAPv3ForOpenDS/OpenDJ" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"OpenDJ","ldapsettings":{"sun-idrepo-ldapv3-config-time-limit":10,"openam-idrepo-ldapv3-mtls-enabled":false,"openam-idrepo-ldapv3-behera-support-enabled":true,"openam-idrepo-ldapv3-affinity-level":"all","sun-idrepo-ldapv3-config-search-scope":"SCOPE_ONE","openam-idrepo-ldapv3-mtls-secret-label":"","sun-idrepo-ldapv3-config-organization_name":"ou=identities","sun-idrepo-ldapv3-config-connection-mode":"LDAPS","openam-idrepo-ldapv3-heartbeat-interval":10,"openam-idrepo-ldapv3-affinity-enabled":false,"sun-idrepo-ldapv3-config-authid":"uid=am-identity-bind-account,ou=admins,ou=identities","openam-idrepo-ldapv3-proxied-auth-enabled":false,"openam-idrepo-ldapv3-heartbeat-timeunit":"SECONDS","sun-idrepo-ldapv3-config-ldap-server":["directory.example.com:1636"],"openam-idrepo-ldapv3-keepalive-searchbase":"","openam-idrepo-ldapv3-keepalive-searchfilter":"(objectclass=*)","sun-idrepo-ldapv3-config-trust-all-server-certificates":false,"openam-idrepo-ldapv3-proxied-auth-denied-fallback":false,"sun-idrepo-ldapv3-config-connection_pool_max_size":10,"sun-idrepo-ldapv3-config-max-result":1000,"sun-idrepo-ldapv3-config-connection_pool_min_size":1,"openam-idrepo-ldapv3-contains-iot-identities-enriched-as-oauth2client":false},"userconfig":{"sun-idrepo-ldapv3-config-people-container-name":"ou","sun-idrepo-ldapv3-config-user-attributes":["iplanet-am-auth-configuration","iplanet-am-user-alias-list","iplanet-am-user-password-reset-question-answer","mail","assignedDashboard","authorityRevocationList","dn","iplanet-am-user-password-reset-options","employeeNumber","createTimestamp","kbaActiveIndex","caCertificate","iplanet-am-session-quota-limit","iplanet-am-user-auth-config","sun-fm-saml2-nameid-infokey","sunIdentityMSISDNNumber","iplanet-am-user-password-reset-force-reset","sunAMAuthInvalidAttemptsData","devicePrintProfiles","givenName","iplanet-am-session-get-valid-sessions","objectClass","adminRole","inetUserHttpURL","lastEmailSent","iplanet-am-user-account-life","postalAddress","userCertificate","preferredtimezone","iplanet-am-user-admin-start-dn","boundDevices","oath2faEnabled","preferredlanguage","sun-fm-saml2-nameid-info","userPassword","iplanet-am-session-service-status","telephoneNumber","iplanet-am-session-max-idle-time","distinguishedName","iplanet-am-session-destroy-sessions","kbaInfoAttempts","modifyTimestamp","uid","iplanet-am-user-success-url","iplanet-am-user-auth-modules","kbaInfo","memberOf","sn","preferredLocale","manager","iplanet-am-session-max-session-time","deviceProfiles","cn","oathDeviceProfiles","webauthnDeviceProfiles","iplanet-am-user-login-status","pushDeviceProfiles","push2faEnabled","inetUserStatus","retryLimitNodeCount","iplanet-am-user-failure-url","iplanet-am-session-max-caching-time"],"sun-idrepo-ldapv3-config-inactive":"Inactive","sun-idrepo-ldapv3-config-auth-kba-index-attr":"kbaActiveIndex","sun-idrepo-ldapv3-config-auth-kba-attempts-attr":["kbaInfoAttempts"],"sun-idrepo-ldapv3-config-user-objectclass":["iplanet-am-managed-person","inetuser","sunFMSAML2NameIdentifier","inetorgperson","devicePrintProfilesContainer","boundDevicesContainer","iplanet-am-user-service","iPlanetPreferences","pushDeviceProfilesContainer","forgerock-am-dashboard-service","organizationalperson","top","kbaInfoContainer","person","sunAMAuthAccountLockout","oathDeviceProfilesContainer","webauthnDeviceProfilesContainer","iplanet-am-auth-configuration-service","deviceProfilesContainer"],"sun-idrepo-ldapv3-config-auth-kba-attr":["kbaInfo"],"sun-idrepo-ldapv3-config-people-container-value":"people","sun-idrepo-ldapv3-config-users-search-attribute":"fr-idm-uuid","sun-idrepo-ldapv3-config-active":"Active","sun-idrepo-ldapv3-config-isactive":"inetuserstatus","sun-idrepo-ldapv3-config-users-search-filter":"(objectclass=inetorgperson)","sun-idrepo-ldapv3-config-createuser-attr-mapping":["cn","sn"]},"groupconfig":{"sun-idrepo-ldapv3-config-group-attributes":["dn","cn","uniqueMember","objectclass"],"sun-idrepo-ldapv3-config-groups-search-attribute":"cn","sun-idrepo-ldapv3-config-memberurl":"memberUrl","sun-idrepo-ldapv3-config-group-container-name":"ou","sun-idrepo-ldapv3-config-group-objectclass":["top","groupofuniquenames"],"sun-idrepo-ldapv3-config-uniquemember":"uniqueMember","sun-idrepo-ldapv3-config-groups-search-filter":"(objectclass=groupOfUniqueNames)","sun-idrepo-ldapv3-config-group-container-value":"groups"},"errorhandling":{"com.iplanet.am.ldap.connection.delay.between.retries":1000},"pluginconfig":{"sunIdRepoAttributeMapping":[],"sunIdRepoSupportedOperations":["realm=read,create,edit,delete,service","user=read,create,edit,delete,service","group=read,create,edit,delete"],"sunIdRepoClass":"org.forgerock.openam.idrepo.ldap.DJLDAPv3Repo"},"authentication":{"sun-idrepo-ldapv3-config-auth-naming-attr":"uid"},"persistentsearch":{"sun-idrepo-ldapv3-config-psearch-filter":"(!(objectclass=frCoreToken))","sun-idrepo-ldapv3-config-psearchbase":"ou=identities","sun-idrepo-ldapv3-config-psearch-scope":"SCOPE_SUB"},"cachecontrol":{"sun-idrepo-ldapv3-dncache-enabled":true,"sun-idrepo-ldapv3-dncache-size":1500},"_type":{"_id":"LDAPv3ForOpenDS","name":"OpenDJ","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log
  ##### Making call to update the search attribute 
  
    # Make the HTTP PUT request
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realms/alpha/realm-config/services/id-repositories/LDAPv3ForOpenDS/OpenDJ" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Connection: keep-alive" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"OpenDJ","ldapsettings":{"openam-idrepo-ldapv3-mtls-enabled":false,"openam-idrepo-ldapv3-heartbeat-timeunit":"SECONDS","sun-idrepo-ldapv3-config-connection_pool_min_size":1,"sun-idrepo-ldapv3-config-search-scope":"SCOPE_ONE","openam-idrepo-ldapv3-proxied-auth-enabled":false,"openam-idrepo-ldapv3-contains-iot-identities-enriched-as-oauth2client":false,"sun-idrepo-ldapv3-config-max-result":1000,"sun-idrepo-ldapv3-config-organization_name":"ou=identities","openam-idrepo-ldapv3-proxied-auth-denied-fallback":false,"openam-idrepo-ldapv3-affinity-enabled":false,"sun-idrepo-ldapv3-config-authid":"uid=am-identity-bind-account,ou=admins,ou=identities","openam-idrepo-ldapv3-heartbeat-interval":10,"sun-idrepo-ldapv3-config-trust-all-server-certificates":false,"sun-idrepo-ldapv3-config-connection-mode":"LDAPS","openam-idrepo-ldapv3-affinity-level":"all","openam-idrepo-ldapv3-keepalive-searchfilter":"(objectclass=*)","openam-idrepo-ldapv3-behera-support-enabled":true,"sun-idrepo-ldapv3-config-ldap-server":["directory.example.com:1636"],"sun-idrepo-ldapv3-config-time-limit":10,"sun-idrepo-ldapv3-config-connection_pool_max_size":10},"userconfig":{"sun-idrepo-ldapv3-config-users-search-filter":"(objectclass=inetorgperson)","sun-idrepo-ldapv3-config-active":"Active","sun-idrepo-ldapv3-config-people-container-name":"ou","sun-idrepo-ldapv3-config-user-objectclass":["iplanet-am-managed-person","inetuser","sunFMSAML2NameIdentifier","inetorgperson","devicePrintProfilesContainer","boundDevicesContainer","iplanet-am-user-service","iPlanetPreferences","pushDeviceProfilesContainer","forgerock-am-dashboard-service","organizationalperson","top","kbaInfoContainer","person","sunAMAuthAccountLockout","oathDeviceProfilesContainer","webauthnDeviceProfilesContainer","iplanet-am-auth-configuration-service","deviceProfilesContainer"],"sun-idrepo-ldapv3-config-users-search-attribute":"fr-idm-uuid","sun-idrepo-ldapv3-config-people-container-value":"people","sun-idrepo-ldapv3-config-auth-kba-attempts-attr":["kbaInfoAttempts"],"sun-idrepo-ldapv3-config-auth-kba-index-attr":"kbaActiveIndex","sun-idrepo-ldapv3-config-user-attributes":["iplanet-am-auth-configuration","iplanet-am-user-alias-list","iplanet-am-user-password-reset-question-answer","mail","assignedDashboard","authorityRevocationList","dn","iplanet-am-user-password-reset-options","employeeNumber","createTimestamp","kbaActiveIndex","caCertificate","iplanet-am-session-quota-limit","iplanet-am-user-auth-config","sun-fm-saml2-nameid-infokey","sunIdentityMSISDNNumber","iplanet-am-user-password-reset-force-reset","sunAMAuthInvalidAttemptsData","devicePrintProfiles","givenName","iplanet-am-session-get-valid-sessions","objectClass","adminRole","inetUserHttpURL","lastEmailSent","iplanet-am-user-account-life","postalAddress","userCertificate","preferredtimezone","iplanet-am-user-admin-start-dn","boundDevices","oath2faEnabled","preferredlanguage","sun-fm-saml2-nameid-info","userPassword","iplanet-am-session-service-status","telephoneNumber","iplanet-am-session-max-idle-time","distinguishedName","iplanet-am-session-destroy-sessions","kbaInfoAttempts","modifyTimestamp","uid","iplanet-am-user-success-url","iplanet-am-user-auth-modules","kbaInfo","memberOf","sn","preferredLocale","manager","iplanet-am-session-max-session-time","deviceProfiles","cn","oathDeviceProfiles","webauthnDeviceProfiles","iplanet-am-user-login-status","pushDeviceProfiles","push2faEnabled","inetUserStatus","retryLimitNodeCount","iplanet-am-user-failure-url","iplanet-am-session-max-caching-time"],"sun-idrepo-ldapv3-config-createuser-attr-mapping":["cn","sn"],"sun-idrepo-ldapv3-config-inactive":"Inactive","sun-idrepo-ldapv3-config-auth-kba-attr":["kbaInfo"],"sun-idrepo-ldapv3-config-isactive":"inetuserstatus"},"groupconfig":{"sun-idrepo-ldapv3-config-group-attributes":["dn","cn","uniqueMember","objectclass"],"sun-idrepo-ldapv3-config-groups-search-attribute":"cn","sun-idrepo-ldapv3-config-memberurl":"memberUrl","sun-idrepo-ldapv3-config-group-container-name":"ou","sun-idrepo-ldapv3-config-group-objectclass":["top","groupofuniquenames"],"sun-idrepo-ldapv3-config-uniquemember":"uniqueMember","sun-idrepo-ldapv3-config-groups-search-filter":"(objectclass=groupOfUniqueNames)","sun-idrepo-ldapv3-config-group-container-value":"groups"},"errorhandling":{"com.iplanet.am.ldap.connection.delay.between.retries":1000},"pluginconfig":{"sunIdRepoAttributeMapping":[],"sunIdRepoSupportedOperations":["realm=read,create,edit,delete,service","user=read,create,edit,delete,service","group=read,create,edit,delete"],"sunIdRepoClass":"org.forgerock.openam.idrepo.ldap.DJLDAPv3Repo"},"authentication":{"sun-idrepo-ldapv3-config-auth-naming-attr":"uid"},"persistentsearch":{"sun-idrepo-ldapv3-config-psearch-filter":"(!(objectclass=frCoreToken))","sun-idrepo-ldapv3-config-psearchbase":"ou=identities","sun-idrepo-ldapv3-config-psearch-scope":"SCOPE_SUB"},"cachecontrol":{"sun-idrepo-ldapv3-dncache-enabled":true,"sun-idrepo-ldapv3-dncache-size":1500},"_type":{"_id":"LDAPv3ForOpenDS","name":"OpenDJ","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log
    ###Delete the ldap from root realm.
    # Make the HTTP DELETE request
    curl -X DELETE "http://am.example.com:8081/am/json/realms/root/realm-config/services/id-repositories/LDAPv3ForOpenDS/OpenDJ" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Connection: keep-alive" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log
 
#### creating clients needed for platform setup################
#### creating client idm-resource-server in root

    # Make the HTTP PUT request to create idm-resource-server
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realm-config/agents/OAuth2Client/idm-resource-server" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-None-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"coreOAuth2ClientConfig":{"defaultScopes":[],"redirectionUris":[],"scopes":["am-introspect-all-tokens","am-introspect-all-tokens-any-realm"],"userpassword":"password"}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log

   ##### creating client idm-provisioning in root

    # Make the HTTP PUT request to create idm-resource-server
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realm-config/agents/OAuth2Client/idm-provisioning" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-None-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"coreOAuth2ClientConfig":{"defaultScopes":[],"redirectionUris":[],"scopes":["fr:idm:*"],"userpassword":"openidm"}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log

##### updating client idm-provisioning in root


    # Make the HTTP PUT request to create idm-resource-server
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realm-config/agents/OAuth2Client/idm-provisioning" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Connection: keep-alive" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"idm-resource-server","overrideOAuth2ClientConfig":{"issueRefreshToken":true,"validateScopePluginType":"PROVIDER","tokenEncryptionEnabled":false,"evaluateScopePluginType":"PROVIDER","oidcMayActScript":"[Empty]","oidcClaimsScript":"[Empty]","scopesPolicySet":"oauth2Scopes","accessTokenModificationPluginType":"PROVIDER","authorizeEndpointDataProviderClass":"org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider","useForceAuthnForMaxAge":false,"oidcClaimsPluginType":"PROVIDER","providerOverridesEnabled":false,"authorizeEndpointDataProviderScript":"[Empty]","statelessTokensEnabled":false,"authorizeEndpointDataProviderPluginType":"PROVIDER","remoteConsentServiceId":null,"enableRemoteConsent":false,"validateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator","usePolicyEngineForScope":false,"evaluateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator","overrideableOIDCClaims":[],"accessTokenMayActScript":"[Empty]","evaluateScopeScript":"[Empty]","clientsCanSkipConsent":false,"accessTokenModificationScript":"[Empty]","issueRefreshTokenOnRefreshedToken":true,"validateScopeScript":"[Empty]"},"advancedOAuth2ClientConfig":{"name":{"value":[],"inherited":false},"softwareIdentity":{"value":"","inherited":false},"require_pushed_authorization_requests":{"value":false,"inherited":false},"subjectType":{"value":"public","inherited":false},"clientUri":{"value":[],"inherited":false},"responseTypes":{"value":["code","token","id_token","code token","token id_token","code id_token","code token id_token","device_code","device_code id_token"],"inherited":false},"logoUri":{"value":[],"inherited":false},"tokenExchangeAuthLevel":{"value":0,"inherited":false},"updateAccessToken":{"value":"","inherited":false},"isConsentImplied":{"value":false,"inherited":false},"contacts":{"value":[],"inherited":false},"descriptions":{"value":[],"inherited":false},"refreshTokenGracePeriod":{"value":0,"inherited":false},"customProperties":{"value":[],"inherited":false},"requestUris":{"value":[],"inherited":false},"softwareVersion":{"value":"","inherited":false},"javascriptOrigins":{"value":[],"inherited":false},"mixUpMitigation":{"value":false,"inherited":false},"tosURI":{"value":[],"inherited":false},"tokenEndpointAuthMethod":{"value":"client_secret_basic","inherited":false},"grantTypes":{"value":["client_credentials"],"inherited":false},"sectorIdentifierUri":{"value":"","inherited":false},"policyUri":{"value":[],"inherited":false}},"signEncOAuth2ClientConfig":{"tokenEndpointAuthSigningAlgorithm":{"inherited":false,"value":"RS256"},"idTokenEncryptionEnabled":{"inherited":false,"value":false},"tokenIntrospectionEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"requestParameterSignedAlg":{"inherited":false},"authorizationResponseSigningAlgorithm":{"inherited":false,"value":"RS256"},"clientJwtPublicKey":{"inherited":false},"idTokenPublicEncryptionKey":{"inherited":false},"mTLSSubjectDN":{"inherited":false},"jwkStoreCacheMissCacheTime":{"inherited":false,"value":60000},"jwkSet":{"inherited":false},"idTokenEncryptionMethod":{"inherited":false,"value":"A128CBC-HS256"},"jwksUri":{"inherited":false},"tokenIntrospectionEncryptedResponseAlg":{"inherited":false,"value":"RSA-OAEP-256"},"authorizationResponseEncryptionMethod":{"inherited":false},"userinfoResponseFormat":{"inherited":false,"value":"JSON"},"mTLSCertificateBoundAccessTokens":{"inherited":false,"value":false},"publicKeyLocation":{"inherited":false,"value":"jwks_uri"},"tokenIntrospectionResponseFormat":{"inherited":false,"value":"JSON"},"requestParameterEncryptedEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"userinfoSignedResponseAlg":{"inherited":false},"idTokenEncryptionAlgorithm":{"inherited":false,"value":"RSA-OAEP-256"},"requestParameterEncryptedAlg":{"inherited":false},"authorizationResponseEncryptionAlgorithm":{"inherited":false},"mTLSTrustedCert":{"inherited":false},"jwksCacheTimeout":{"inherited":false,"value":3600000},"userinfoEncryptedResponseAlg":{"inherited":false},"idTokenSignedResponseAlg":{"inherited":false,"value":"RS256"},"tokenIntrospectionSignedResponseAlg":{"inherited":false,"value":"RS256"},"userinfoEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"}},"coreOAuth2ClientConfig":{"secretLabelIdentifier":{"inherited":false},"status":{"inherited":false,"value":"Active"},"clientName":{"inherited":false,"value":[]},"clientType":{"inherited":false,"value":"Confidential"},"loopbackInterfaceRedirection":{"inherited":false,"value":false},"defaultScopes":{"inherited":false,"value":[]},"refreshTokenLifetime":{"inherited":false,"value":0},"scopes":{"inherited":false,"value":["fr:idm:*"]},"accessTokenLifetime":{"inherited":false,"value":0},"redirectionUris":{"inherited":false,"value":[]},"authorizationCodeLifetime":{"inherited":false,"value":0}},"coreOpenIDClientConfig":{"claims":{"inherited":false,"value":[]},"backchannel_logout_uri":{"inherited":false},"defaultAcrValues":{"inherited":false,"value":[]},"jwtTokenLifetime":{"inherited":false,"value":0},"defaultMaxAgeEnabled":{"inherited":false,"value":false},"clientSessionUri":{"inherited":false},"defaultMaxAge":{"inherited":false,"value":600},"postLogoutRedirectUri":{"inherited":false,"value":[]},"backchannel_logout_session_required":{"inherited":false,"value":false}},"coreUmaClientConfig":{"claimsRedirectionUris":{"inherited":false,"value":[]}},"_type":{"_id":"OAuth2Client","name":"OAuth2 Clients","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log
 
    ##### creating client idm-provisioning in alpha

    # Make the HTTP PUT request to create idm-resource-server
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realms/alpha/realm-config/agents/OAuth2Client/idm-provisioning" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-None-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"coreOAuth2ClientConfig":{"defaultScopes":[],"redirectionUris":[],"scopes":["fr:idm:*"],"userpassword":"openidm"}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log

##### updating client idm-provisioning in alpha


    # Make the HTTP PUT request to update idm-provision
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realms/alpha/realm-config/agents/OAuth2Client/idm-provisioning" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Connection: keep-alive" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"idm-resource-server","overrideOAuth2ClientConfig":{"issueRefreshToken":true,"validateScopePluginType":"PROVIDER","tokenEncryptionEnabled":false,"evaluateScopePluginType":"PROVIDER","oidcMayActScript":"[Empty]","oidcClaimsScript":"[Empty]","scopesPolicySet":"oauth2Scopes","accessTokenModificationPluginType":"PROVIDER","authorizeEndpointDataProviderClass":"org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider","useForceAuthnForMaxAge":false,"oidcClaimsPluginType":"PROVIDER","providerOverridesEnabled":false,"authorizeEndpointDataProviderScript":"[Empty]","statelessTokensEnabled":false,"authorizeEndpointDataProviderPluginType":"PROVIDER","remoteConsentServiceId":null,"enableRemoteConsent":false,"validateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator","usePolicyEngineForScope":false,"evaluateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator","overrideableOIDCClaims":[],"accessTokenMayActScript":"[Empty]","evaluateScopeScript":"[Empty]","clientsCanSkipConsent":false,"accessTokenModificationScript":"[Empty]","issueRefreshTokenOnRefreshedToken":true,"validateScopeScript":"[Empty]"},"advancedOAuth2ClientConfig":{"name":{"value":[],"inherited":false},"softwareIdentity":{"value":"","inherited":false},"require_pushed_authorization_requests":{"value":false,"inherited":false},"subjectType":{"value":"public","inherited":false},"clientUri":{"value":[],"inherited":false},"responseTypes":{"value":["code","token","id_token","code token","token id_token","code id_token","code token id_token","device_code","device_code id_token"],"inherited":false},"logoUri":{"value":[],"inherited":false},"tokenExchangeAuthLevel":{"value":0,"inherited":false},"updateAccessToken":{"value":"","inherited":false},"isConsentImplied":{"value":false,"inherited":false},"contacts":{"value":[],"inherited":false},"descriptions":{"value":[],"inherited":false},"refreshTokenGracePeriod":{"value":0,"inherited":false},"customProperties":{"value":[],"inherited":false},"requestUris":{"value":[],"inherited":false},"softwareVersion":{"value":"","inherited":false},"javascriptOrigins":{"value":[],"inherited":false},"mixUpMitigation":{"value":false,"inherited":false},"tosURI":{"value":[],"inherited":false},"tokenEndpointAuthMethod":{"value":"client_secret_basic","inherited":false},"grantTypes":{"value":["client_credentials"],"inherited":false},"sectorIdentifierUri":{"value":"","inherited":false},"policyUri":{"value":[],"inherited":false}},"signEncOAuth2ClientConfig":{"tokenEndpointAuthSigningAlgorithm":{"inherited":false,"value":"RS256"},"idTokenEncryptionEnabled":{"inherited":false,"value":false},"tokenIntrospectionEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"requestParameterSignedAlg":{"inherited":false},"authorizationResponseSigningAlgorithm":{"inherited":false,"value":"RS256"},"clientJwtPublicKey":{"inherited":false},"idTokenPublicEncryptionKey":{"inherited":false},"mTLSSubjectDN":{"inherited":false},"jwkStoreCacheMissCacheTime":{"inherited":false,"value":60000},"jwkSet":{"inherited":false},"idTokenEncryptionMethod":{"inherited":false,"value":"A128CBC-HS256"},"jwksUri":{"inherited":false},"tokenIntrospectionEncryptedResponseAlg":{"inherited":false,"value":"RSA-OAEP-256"},"authorizationResponseEncryptionMethod":{"inherited":false},"userinfoResponseFormat":{"inherited":false,"value":"JSON"},"mTLSCertificateBoundAccessTokens":{"inherited":false,"value":false},"publicKeyLocation":{"inherited":false,"value":"jwks_uri"},"tokenIntrospectionResponseFormat":{"inherited":false,"value":"JSON"},"requestParameterEncryptedEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"userinfoSignedResponseAlg":{"inherited":false},"idTokenEncryptionAlgorithm":{"inherited":false,"value":"RSA-OAEP-256"},"requestParameterEncryptedAlg":{"inherited":false},"authorizationResponseEncryptionAlgorithm":{"inherited":false},"mTLSTrustedCert":{"inherited":false},"jwksCacheTimeout":{"inherited":false,"value":3600000},"userinfoEncryptedResponseAlg":{"inherited":false},"idTokenSignedResponseAlg":{"inherited":false,"value":"RS256"},"tokenIntrospectionSignedResponseAlg":{"inherited":false,"value":"RS256"},"userinfoEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"}},"coreOAuth2ClientConfig":{"secretLabelIdentifier":{"inherited":false},"status":{"inherited":false,"value":"Active"},"clientName":{"inherited":false,"value":[]},"clientType":{"inherited":false,"value":"Confidential"},"loopbackInterfaceRedirection":{"inherited":false,"value":false},"defaultScopes":{"inherited":false,"value":[]},"refreshTokenLifetime":{"inherited":false,"value":0},"scopes":{"inherited":false,"value":["fr:idm:*"]},"accessTokenLifetime":{"inherited":false,"value":0},"redirectionUris":{"inherited":false,"value":[]},"authorizationCodeLifetime":{"inherited":false,"value":0}},"coreOpenIDClientConfig":{"claims":{"inherited":false,"value":[]},"backchannel_logout_uri":{"inherited":false},"defaultAcrValues":{"inherited":false,"value":[]},"jwtTokenLifetime":{"inherited":false,"value":0},"defaultMaxAgeEnabled":{"inherited":false,"value":false},"clientSessionUri":{"inherited":false},"defaultMaxAge":{"inherited":false,"value":600},"postLogoutRedirectUri":{"inherited":false,"value":[]},"backchannel_logout_session_required":{"inherited":false,"value":false}},"coreUmaClientConfig":{"claimsRedirectionUris":{"inherited":false,"value":[]}},"_type":{"_id":"OAuth2Client","name":"OAuth2 Clients","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log


##### creating client idm-admin-ui in alpha
    # Make the HTTP PUT request to create idm-admin-ui
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realms/alpha/realm-config/agents/OAuth2Client/idm-admin-ui" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "Content-Type: application/json" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Host: am.example.com:8081" \
      -H "If-None-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"coreOAuth2ClientConfig":{"defaultScopes":[],"redirectionUris":["http://openidm.example.com:8080/platform/appAuthHelperRedirect.html","http://openidm.example.com:8080/platform/sessionCheck.html","http://openidm.example.com:8080/admin/appAuthHelperRedirect.html","http://openidm.example.com:8080/admin/sessionCheck.html","http://admin.example.com:8082/appAuthHelperRedirect.html","http://admin.example.com:8082/sessionCheck.html"],"scopes":["openid","fr:idm:*"]}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log
  
##### creating client idm-admin-ui in root
    # Make the HTTP PUT request to create idm-admin-ui
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realm-config/agents/OAuth2Client/idm-admin-ui" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "Content-Type: application/json" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Host: am.example.com:8081" \
      -H "If-None-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"coreOAuth2ClientConfig":{"defaultScopes":[],"redirectionUris":["http://openidm.example.com:8080/platform/appAuthHelperRedirect.html","http://openidm.example.com:8080/platform/sessionCheck.html","http://openidm.example.com:8080/admin/appAuthHelperRedirect.html","http://openidm.example.com:8080/admin/sessionCheck.html","http://admin.example.com:8082/appAuthHelperRedirect.html","http://admin.example.com:8082/sessionCheck.html"],"scopes":["openid","fr:idm:*"]}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log

##### updating client idm-admin-ui in alpha to public

    # Make the HTTP PUT request to update idm-admin-ui
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realms/alpha/realm-config/agents/OAuth2Client/idm-admin-ui" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"idm-admin-ui","overrideOAuth2ClientConfig":{"issueRefreshToken":true,"validateScopePluginType":"PROVIDER","tokenEncryptionEnabled":false,"evaluateScopePluginType":"PROVIDER","oidcMayActScript":"[Empty]","oidcClaimsScript":"[Empty]","scopesPolicySet":"oauth2Scopes","accessTokenModificationPluginType":"PROVIDER","authorizeEndpointDataProviderClass":"org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider","useForceAuthnForMaxAge":false,"oidcClaimsPluginType":"PROVIDER","providerOverridesEnabled":false,"authorizeEndpointDataProviderScript":"[Empty]","statelessTokensEnabled":false,"authorizeEndpointDataProviderPluginType":"PROVIDER","remoteConsentServiceId":null,"enableRemoteConsent":false,"validateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator","usePolicyEngineForScope":false,"evaluateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator","overrideableOIDCClaims":[],"accessTokenMayActScript":"[Empty]","evaluateScopeScript":"[Empty]","clientsCanSkipConsent":false,"accessTokenModificationScript":"[Empty]","issueRefreshTokenOnRefreshedToken":true,"validateScopeScript":"[Empty]"},"advancedOAuth2ClientConfig":{"logoUri":{"inherited":false,"value":[]},"subjectType":{"inherited":false,"value":"public"},"clientUri":{"inherited":false,"value":[]},"tokenExchangeAuthLevel":{"inherited":false,"value":0},"responseTypes":{"inherited":false,"value":["code","token","id_token","code token","token id_token","code id_token","code token id_token","device_code","device_code id_token"]},"mixUpMitigation":{"inherited":false,"value":false},"customProperties":{"inherited":false,"value":[]},"javascriptOrigins":{"inherited":false,"value":[]},"policyUri":{"inherited":false,"value":[]},"softwareVersion":{"inherited":false},"tosURI":{"inherited":false,"value":[]},"sectorIdentifierUri":{"inherited":false},"tokenEndpointAuthMethod":{"inherited":false,"value":"client_secret_basic"},"refreshTokenGracePeriod":{"inherited":false,"value":0},"isConsentImplied":{"inherited":false,"value":false},"softwareIdentity":{"inherited":false},"grantTypes":{"inherited":false,"value":["authorization_code"]},"require_pushed_authorization_requests":{"inherited":false,"value":false},"descriptions":{"inherited":false,"value":[]},"requestUris":{"inherited":false,"value":[]},"name":{"inherited":false,"value":[]},"contacts":{"inherited":false,"value":[]},"updateAccessToken":{"inherited":false}},"signEncOAuth2ClientConfig":{"tokenEndpointAuthSigningAlgorithm":{"inherited":false,"value":"RS256"},"idTokenEncryptionEnabled":{"inherited":false,"value":false},"tokenIntrospectionEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"requestParameterSignedAlg":{"inherited":false},"authorizationResponseSigningAlgorithm":{"inherited":false,"value":"RS256"},"clientJwtPublicKey":{"inherited":false},"idTokenPublicEncryptionKey":{"inherited":false},"mTLSSubjectDN":{"inherited":false},"jwkStoreCacheMissCacheTime":{"inherited":false,"value":60000},"jwkSet":{"inherited":false},"idTokenEncryptionMethod":{"inherited":false,"value":"A128CBC-HS256"},"jwksUri":{"inherited":false},"tokenIntrospectionEncryptedResponseAlg":{"inherited":false,"value":"RSA-OAEP-256"},"authorizationResponseEncryptionMethod":{"inherited":false},"userinfoResponseFormat":{"inherited":false,"value":"JSON"},"mTLSCertificateBoundAccessTokens":{"inherited":false,"value":false},"publicKeyLocation":{"inherited":false,"value":"jwks_uri"},"tokenIntrospectionResponseFormat":{"inherited":false,"value":"JSON"},"requestParameterEncryptedEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"userinfoSignedResponseAlg":{"inherited":false},"idTokenEncryptionAlgorithm":{"inherited":false,"value":"RSA-OAEP-256"},"requestParameterEncryptedAlg":{"inherited":false},"authorizationResponseEncryptionAlgorithm":{"inherited":false},"mTLSTrustedCert":{"inherited":false},"jwksCacheTimeout":{"inherited":false,"value":3600000},"userinfoEncryptedResponseAlg":{"inherited":false},"idTokenSignedResponseAlg":{"inherited":false,"value":"RS256"},"tokenIntrospectionSignedResponseAlg":{"inherited":false,"value":"RS256"},"userinfoEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"}},"coreOAuth2ClientConfig":{"secretLabelIdentifier":{"value":"","inherited":false},"defaultScopes":{"value":[],"inherited":false},"scopes":{"value":["openid","fr:idm:*"],"inherited":false},"redirectionUris":{"value":["http://openidm.example.com:8080/platform/appAuthHelperRedirect.html","http://openidm.example.com:8080/platform/sessionCheck.html","http://openidm.example.com:8080/admin/appAuthHelperRedirect.html","http://openidm.example.com:8080/admin/sessionCheck.html","http://admin.example.com:8082/appAuthHelperRedirect.html","http://admin.example.com:8082/sessionCheck.html"],"inherited":false},"status":{"value":"Active","inherited":false},"authorizationCodeLifetime":{"value":0,"inherited":false},"refreshTokenLifetime":{"value":0,"inherited":false},"agentgroup":"","accessTokenLifetime":{"value":0,"inherited":false},"clientType":{"value":"Public","inherited":false},"loopbackInterfaceRedirection":{"value":false,"inherited":false},"clientName":{"value":[],"inherited":false}},"coreOpenIDClientConfig":{"claims":{"inherited":false,"value":[]},"backchannel_logout_uri":{"inherited":false},"defaultAcrValues":{"inherited":false,"value":[]},"jwtTokenLifetime":{"inherited":false,"value":0},"defaultMaxAgeEnabled":{"inherited":false,"value":false},"clientSessionUri":{"inherited":false},"defaultMaxAge":{"inherited":false,"value":600},"postLogoutRedirectUri":{"inherited":false,"value":[]},"backchannel_logout_session_required":{"inherited":false,"value":false}},"coreUmaClientConfig":{"claimsRedirectionUris":{"inherited":false,"value":[]}},"_type":{"_id":"OAuth2Client","name":"OAuth2 Clients","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log

##### updating client idm-admin-ui in root to public

    # Make the HTTP PUT request to update idm-admin-ui
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realm-config/agents/OAuth2Client/idm-admin-ui" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"idm-admin-ui","overrideOAuth2ClientConfig":{"issueRefreshToken":true,"validateScopePluginType":"PROVIDER","tokenEncryptionEnabled":false,"evaluateScopePluginType":"PROVIDER","oidcMayActScript":"[Empty]","oidcClaimsScript":"[Empty]","scopesPolicySet":"oauth2Scopes","accessTokenModificationPluginType":"PROVIDER","authorizeEndpointDataProviderClass":"org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider","useForceAuthnForMaxAge":false,"oidcClaimsPluginType":"PROVIDER","providerOverridesEnabled":false,"authorizeEndpointDataProviderScript":"[Empty]","statelessTokensEnabled":false,"authorizeEndpointDataProviderPluginType":"PROVIDER","remoteConsentServiceId":null,"enableRemoteConsent":false,"validateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator","usePolicyEngineForScope":false,"evaluateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator","overrideableOIDCClaims":[],"accessTokenMayActScript":"[Empty]","evaluateScopeScript":"[Empty]","clientsCanSkipConsent":false,"accessTokenModificationScript":"[Empty]","issueRefreshTokenOnRefreshedToken":true,"validateScopeScript":"[Empty]"},"advancedOAuth2ClientConfig":{"logoUri":{"inherited":false,"value":[]},"subjectType":{"inherited":false,"value":"public"},"clientUri":{"inherited":false,"value":[]},"tokenExchangeAuthLevel":{"inherited":false,"value":0},"responseTypes":{"inherited":false,"value":["code","token","id_token","code token","token id_token","code id_token","code token id_token","device_code","device_code id_token"]},"mixUpMitigation":{"inherited":false,"value":false},"customProperties":{"inherited":false,"value":[]},"javascriptOrigins":{"inherited":false,"value":[]},"policyUri":{"inherited":false,"value":[]},"softwareVersion":{"inherited":false},"tosURI":{"inherited":false,"value":[]},"sectorIdentifierUri":{"inherited":false},"tokenEndpointAuthMethod":{"inherited":false,"value":"client_secret_basic"},"refreshTokenGracePeriod":{"inherited":false,"value":0},"isConsentImplied":{"inherited":false,"value":false},"softwareIdentity":{"inherited":false},"grantTypes":{"inherited":false,"value":["authorization_code"]},"require_pushed_authorization_requests":{"inherited":false,"value":false},"descriptions":{"inherited":false,"value":[]},"requestUris":{"inherited":false,"value":[]},"name":{"inherited":false,"value":[]},"contacts":{"inherited":false,"value":[]},"updateAccessToken":{"inherited":false}},"signEncOAuth2ClientConfig":{"tokenEndpointAuthSigningAlgorithm":{"inherited":false,"value":"RS256"},"idTokenEncryptionEnabled":{"inherited":false,"value":false},"tokenIntrospectionEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"requestParameterSignedAlg":{"inherited":false},"authorizationResponseSigningAlgorithm":{"inherited":false,"value":"RS256"},"clientJwtPublicKey":{"inherited":false},"idTokenPublicEncryptionKey":{"inherited":false},"mTLSSubjectDN":{"inherited":false},"jwkStoreCacheMissCacheTime":{"inherited":false,"value":60000},"jwkSet":{"inherited":false},"idTokenEncryptionMethod":{"inherited":false,"value":"A128CBC-HS256"},"jwksUri":{"inherited":false},"tokenIntrospectionEncryptedResponseAlg":{"inherited":false,"value":"RSA-OAEP-256"},"authorizationResponseEncryptionMethod":{"inherited":false},"userinfoResponseFormat":{"inherited":false,"value":"JSON"},"mTLSCertificateBoundAccessTokens":{"inherited":false,"value":false},"publicKeyLocation":{"inherited":false,"value":"jwks_uri"},"tokenIntrospectionResponseFormat":{"inherited":false,"value":"JSON"},"requestParameterEncryptedEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"userinfoSignedResponseAlg":{"inherited":false},"idTokenEncryptionAlgorithm":{"inherited":false,"value":"RSA-OAEP-256"},"requestParameterEncryptedAlg":{"inherited":false},"authorizationResponseEncryptionAlgorithm":{"inherited":false},"mTLSTrustedCert":{"inherited":false},"jwksCacheTimeout":{"inherited":false,"value":3600000},"userinfoEncryptedResponseAlg":{"inherited":false},"idTokenSignedResponseAlg":{"inherited":false,"value":"RS256"},"tokenIntrospectionSignedResponseAlg":{"inherited":false,"value":"RS256"},"userinfoEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"}},"coreOAuth2ClientConfig":{"secretLabelIdentifier":{"value":"","inherited":false},"defaultScopes":{"value":[],"inherited":false},"scopes":{"value":["openid","fr:idm:*"],"inherited":false},"redirectionUris":{"value":["http://openidm.example.com:8080/platform/appAuthHelperRedirect.html","http://openidm.example.com:8080/platform/sessionCheck.html","http://openidm.example.com:8080/admin/appAuthHelperRedirect.html","http://openidm.example.com:8080/admin/sessionCheck.html","http://admin.example.com:8082/appAuthHelperRedirect.html","http://admin.example.com:8082/sessionCheck.html"],"inherited":false},"status":{"value":"Active","inherited":false},"authorizationCodeLifetime":{"value":0,"inherited":false},"refreshTokenLifetime":{"value":0,"inherited":false},"agentgroup":"","accessTokenLifetime":{"value":0,"inherited":false},"clientType":{"value":"Public","inherited":false},"loopbackInterfaceRedirection":{"value":false,"inherited":false},"clientName":{"value":[],"inherited":false}},"coreOpenIDClientConfig":{"claims":{"inherited":false,"value":[]},"backchannel_logout_uri":{"inherited":false},"defaultAcrValues":{"inherited":false,"value":[]},"jwtTokenLifetime":{"inherited":false,"value":0},"defaultMaxAgeEnabled":{"inherited":false,"value":false},"clientSessionUri":{"inherited":false},"defaultMaxAge":{"inherited":false,"value":600},"postLogoutRedirectUri":{"inherited":false,"value":[]},"backchannel_logout_session_required":{"inherited":false,"value":false}},"coreUmaClientConfig":{"claimsRedirectionUris":{"inherited":false,"value":[]}},"_type":{"_id":"OAuth2Client","name":"OAuth2 Clients","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log

##### updating client advanced tab in idm-admin-ui for realm alpha

    # Make the HTTP PUT request to update idm-admin-ui
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realms/alpha/realm-config/agents/OAuth2Client/idm-admin-ui" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"idm-admin-ui","overrideOAuth2ClientConfig":{"issueRefreshToken":true,"validateScopePluginType":"PROVIDER","tokenEncryptionEnabled":false,"evaluateScopePluginType":"PROVIDER","oidcMayActScript":"[Empty]","oidcClaimsScript":"[Empty]","scopesPolicySet":"oauth2Scopes","accessTokenModificationPluginType":"PROVIDER","authorizeEndpointDataProviderClass":"org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider","useForceAuthnForMaxAge":false,"oidcClaimsPluginType":"PROVIDER","providerOverridesEnabled":false,"authorizeEndpointDataProviderScript":"[Empty]","statelessTokensEnabled":false,"authorizeEndpointDataProviderPluginType":"PROVIDER","remoteConsentServiceId":null,"enableRemoteConsent":false,"validateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator","usePolicyEngineForScope":false,"evaluateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator","overrideableOIDCClaims":[],"accessTokenMayActScript":"[Empty]","evaluateScopeScript":"[Empty]","clientsCanSkipConsent":false,"accessTokenModificationScript":"[Empty]","issueRefreshTokenOnRefreshedToken":true,"validateScopeScript":"[Empty]"},"advancedOAuth2ClientConfig":{"mixUpMitigation":{"value":false,"inherited":false},"grantTypes":{"value":["authorization_code","implicit"],"inherited":false},"softwareVersion":{"value":"","inherited":false},"softwareIdentity":{"value":"","inherited":false},"tokenEndpointAuthMethod":{"value":"none","inherited":false},"tokenExchangeAuthLevel":{"value":0,"inherited":false},"contacts":{"value":[],"inherited":false},"policyUri":{"value":[],"inherited":false},"sectorIdentifierUri":{"value":"","inherited":false},"javascriptOrigins":{"value":[],"inherited":false},"updateAccessToken":{"value":"","inherited":false},"name":{"value":[],"inherited":false},"descriptions":{"value":[],"inherited":false},"require_pushed_authorization_requests":{"value":false,"inherited":false},"tosURI":{"value":[],"inherited":false},"requestUris":{"value":[],"inherited":false},"clientUri":{"value":[],"inherited":false},"refreshTokenGracePeriod":{"value":0,"inherited":false},"subjectType":{"value":"public","inherited":false},"logoUri":{"value":[],"inherited":false},"responseTypes":{"value":["code","token","id_token","code token","token id_token","code id_token","code token id_token","device_code","device_code id_token"],"inherited":false},"isConsentImplied":{"value":true,"inherited":false},"customProperties":{"value":[],"inherited":false}},"signEncOAuth2ClientConfig":{"tokenEndpointAuthSigningAlgorithm":{"inherited":false,"value":"RS256"},"idTokenEncryptionEnabled":{"inherited":false,"value":false},"tokenIntrospectionEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"requestParameterSignedAlg":{"inherited":false},"authorizationResponseSigningAlgorithm":{"inherited":false,"value":"RS256"},"clientJwtPublicKey":{"inherited":false},"idTokenPublicEncryptionKey":{"inherited":false},"mTLSSubjectDN":{"inherited":false},"jwkStoreCacheMissCacheTime":{"inherited":false,"value":60000},"jwkSet":{"inherited":false},"idTokenEncryptionMethod":{"inherited":false,"value":"A128CBC-HS256"},"jwksUri":{"inherited":false},"tokenIntrospectionEncryptedResponseAlg":{"inherited":false,"value":"RSA-OAEP-256"},"authorizationResponseEncryptionMethod":{"inherited":false},"userinfoResponseFormat":{"inherited":false,"value":"JSON"},"mTLSCertificateBoundAccessTokens":{"inherited":false,"value":false},"publicKeyLocation":{"inherited":false,"value":"jwks_uri"},"tokenIntrospectionResponseFormat":{"inherited":false,"value":"JSON"},"requestParameterEncryptedEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"userinfoSignedResponseAlg":{"inherited":false},"idTokenEncryptionAlgorithm":{"inherited":false,"value":"RSA-OAEP-256"},"requestParameterEncryptedAlg":{"inherited":false},"authorizationResponseEncryptionAlgorithm":{"inherited":false},"mTLSTrustedCert":{"inherited":false},"jwksCacheTimeout":{"inherited":false,"value":3600000},"userinfoEncryptedResponseAlg":{"inherited":false},"idTokenSignedResponseAlg":{"inherited":false,"value":"RS256"},"tokenIntrospectionSignedResponseAlg":{"inherited":false,"value":"RS256"},"userinfoEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"}},"coreOAuth2ClientConfig":{"secretLabelIdentifier":{"inherited":false},"status":{"inherited":false,"value":"Active"},"clientName":{"inherited":false,"value":[]},"clientType":{"inherited":false,"value":"Public"},"loopbackInterfaceRedirection":{"inherited":false,"value":false},"defaultScopes":{"inherited":false,"value":[]},"refreshTokenLifetime":{"inherited":false,"value":0},"scopes":{"inherited":false,"value":["openid","fr:idm:*"]},"accessTokenLifetime":{"inherited":false,"value":0},"redirectionUris":{"inherited":false,"value":["http://openidm.example.com:8080/platform/appAuthHelperRedirect.html","http://openidm.example.com:8080/platform/sessionCheck.html","http://openidm.example.com:8080/admin/appAuthHelperRedirect.html","http://openidm.example.com:8080/admin/sessionCheck.html","http://admin.example.com:8082/appAuthHelperRedirect.html","http://admin.example.com:8082/sessionCheck.html"]},"authorizationCodeLifetime":{"inherited":false,"value":0}},"coreOpenIDClientConfig":{"claims":{"inherited":false,"value":[]},"backchannel_logout_uri":{"inherited":false},"defaultAcrValues":{"inherited":false,"value":[]},"jwtTokenLifetime":{"inherited":false,"value":0},"defaultMaxAgeEnabled":{"inherited":false,"value":false},"clientSessionUri":{"inherited":false},"defaultMaxAge":{"inherited":false,"value":600},"postLogoutRedirectUri":{"inherited":false,"value":[]},"backchannel_logout_session_required":{"inherited":false,"value":false}},"coreUmaClientConfig":{"claimsRedirectionUris":{"inherited":false,"value":[]}},"_type":{"_id":"OAuth2Client","name":"OAuth2 Clients","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log

##### updating client advanced tab in idm-admin-ui for realm root

    # Make the HTTP PUT request to update idm-admin-ui
    curl -X PUT "http://am.example.com:8081/am/json/realms/root/realm-config/agents/OAuth2Client/idm-admin-ui" \
      -H "Accept: application/json, text/javascript, */*; q=0.01" \
      -H "Accept-API-Version: protocol=2.0,resource=1.0" \
      -H "Accept-Encoding: gzip, deflate" \
      -H "Accept-Language: en-US" \
      -H "Cache-Control: no-cache" \
      -H "Connection: keep-alive" \
      -H "iPlanetDirectoryPro: $ADMIN_TOKEN" \
      -H "Content-Type: application/json" \
      -H "Host: am.example.com:8081" \
      -H "If-Match: *" \
      -H "Origin: http://am.example.com:8081" \
      -H "Referer: http://am.example.com:8081/am/ui-admin/" \
      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"_id":"idm-admin-ui","overrideOAuth2ClientConfig":{"issueRefreshToken":true,"validateScopePluginType":"PROVIDER","tokenEncryptionEnabled":false,"evaluateScopePluginType":"PROVIDER","oidcMayActScript":"[Empty]","oidcClaimsScript":"[Empty]","scopesPolicySet":"oauth2Scopes","accessTokenModificationPluginType":"PROVIDER","authorizeEndpointDataProviderClass":"org.forgerock.oauth2.core.plugins.registry.DefaultEndpointDataProvider","useForceAuthnForMaxAge":false,"oidcClaimsPluginType":"PROVIDER","providerOverridesEnabled":false,"authorizeEndpointDataProviderScript":"[Empty]","statelessTokensEnabled":false,"authorizeEndpointDataProviderPluginType":"PROVIDER","remoteConsentServiceId":null,"enableRemoteConsent":false,"validateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeValidator","usePolicyEngineForScope":false,"evaluateScopeClass":"org.forgerock.oauth2.core.plugins.registry.DefaultScopeEvaluator","overrideableOIDCClaims":[],"accessTokenMayActScript":"[Empty]","evaluateScopeScript":"[Empty]","clientsCanSkipConsent":false,"accessTokenModificationScript":"[Empty]","issueRefreshTokenOnRefreshedToken":true,"validateScopeScript":"[Empty]"},"advancedOAuth2ClientConfig":{"mixUpMitigation":{"value":false,"inherited":false},"grantTypes":{"value":["authorization_code","implicit"],"inherited":false},"softwareVersion":{"value":"","inherited":false},"softwareIdentity":{"value":"","inherited":false},"tokenEndpointAuthMethod":{"value":"none","inherited":false},"tokenExchangeAuthLevel":{"value":0,"inherited":false},"contacts":{"value":[],"inherited":false},"policyUri":{"value":[],"inherited":false},"sectorIdentifierUri":{"value":"","inherited":false},"javascriptOrigins":{"value":[],"inherited":false},"updateAccessToken":{"value":"","inherited":false},"name":{"value":[],"inherited":false},"descriptions":{"value":[],"inherited":false},"require_pushed_authorization_requests":{"value":false,"inherited":false},"tosURI":{"value":[],"inherited":false},"requestUris":{"value":[],"inherited":false},"clientUri":{"value":[],"inherited":false},"refreshTokenGracePeriod":{"value":0,"inherited":false},"subjectType":{"value":"public","inherited":false},"logoUri":{"value":[],"inherited":false},"responseTypes":{"value":["code","token","id_token","code token","token id_token","code id_token","code token id_token","device_code","device_code id_token"],"inherited":false},"isConsentImplied":{"value":true,"inherited":false},"customProperties":{"value":[],"inherited":false}},"signEncOAuth2ClientConfig":{"tokenEndpointAuthSigningAlgorithm":{"inherited":false,"value":"RS256"},"idTokenEncryptionEnabled":{"inherited":false,"value":false},"tokenIntrospectionEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"requestParameterSignedAlg":{"inherited":false},"authorizationResponseSigningAlgorithm":{"inherited":false,"value":"RS256"},"clientJwtPublicKey":{"inherited":false},"idTokenPublicEncryptionKey":{"inherited":false},"mTLSSubjectDN":{"inherited":false},"jwkStoreCacheMissCacheTime":{"inherited":false,"value":60000},"jwkSet":{"inherited":false},"idTokenEncryptionMethod":{"inherited":false,"value":"A128CBC-HS256"},"jwksUri":{"inherited":false},"tokenIntrospectionEncryptedResponseAlg":{"inherited":false,"value":"RSA-OAEP-256"},"authorizationResponseEncryptionMethod":{"inherited":false},"userinfoResponseFormat":{"inherited":false,"value":"JSON"},"mTLSCertificateBoundAccessTokens":{"inherited":false,"value":false},"publicKeyLocation":{"inherited":false,"value":"jwks_uri"},"tokenIntrospectionResponseFormat":{"inherited":false,"value":"JSON"},"requestParameterEncryptedEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"},"userinfoSignedResponseAlg":{"inherited":false},"idTokenEncryptionAlgorithm":{"inherited":false,"value":"RSA-OAEP-256"},"requestParameterEncryptedAlg":{"inherited":false},"authorizationResponseEncryptionAlgorithm":{"inherited":false},"mTLSTrustedCert":{"inherited":false},"jwksCacheTimeout":{"inherited":false,"value":3600000},"userinfoEncryptedResponseAlg":{"inherited":false},"idTokenSignedResponseAlg":{"inherited":false,"value":"RS256"},"tokenIntrospectionSignedResponseAlg":{"inherited":false,"value":"RS256"},"userinfoEncryptedResponseEncryptionAlgorithm":{"inherited":false,"value":"A128CBC-HS256"}},"coreOAuth2ClientConfig":{"secretLabelIdentifier":{"inherited":false},"status":{"inherited":false,"value":"Active"},"clientName":{"inherited":false,"value":[]},"clientType":{"inherited":false,"value":"Public"},"loopbackInterfaceRedirection":{"inherited":false,"value":false},"defaultScopes":{"inherited":false,"value":[]},"refreshTokenLifetime":{"inherited":false,"value":0},"scopes":{"inherited":false,"value":["openid","fr:idm:*"]},"accessTokenLifetime":{"inherited":false,"value":0},"redirectionUris":{"inherited":false,"value":["http://openidm.example.com:8080/platform/appAuthHelperRedirect.html","http://openidm.example.com:8080/platform/sessionCheck.html","http://openidm.example.com:8080/admin/appAuthHelperRedirect.html","http://openidm.example.com:8080/admin/sessionCheck.html","http://admin.example.com:8082/appAuthHelperRedirect.html","http://admin.example.com:8082/sessionCheck.html"]},"authorizationCodeLifetime":{"inherited":false,"value":0}},"coreOpenIDClientConfig":{"claims":{"inherited":false,"value":[]},"backchannel_logout_uri":{"inherited":false},"defaultAcrValues":{"inherited":false,"value":[]},"jwtTokenLifetime":{"inherited":false,"value":0},"defaultMaxAgeEnabled":{"inherited":false,"value":false},"clientSessionUri":{"inherited":false},"defaultMaxAge":{"inherited":false,"value":600},"postLogoutRedirectUri":{"inherited":false,"value":[]},"backchannel_logout_session_required":{"inherited":false,"value":false}},"coreUmaClientConfig":{"claimsRedirectionUris":{"inherited":false,"value":[]}},"_type":{"_id":"OAuth2Client","name":"OAuth2 Clients","collection":true}}' \
      -o /vagrant/curl_response.json \
      -v 2>> /vagrant/curl_error.log

    # Check the curl exit status
    if [ $? -ne 0 ]; then
      echo "curl request failed. Check /vagrant/curl_error.log for details."
      exit 1
    fi

    # Log completion
    echo "Request completed at $(date)" >> /vagrant/curl_request.log


 #################################################################
 #################Start if idm installation######################

 #1. Install forgerock idm
 sudo unzip #{software_folder_server}IDM-#{idm_version}.zip -d #{install_location}
 sudo sed -i 's/^openidm.host=.*/openidm.host=#{idm_hostname}/' #{install_location}openidm/resolver/boot.properties
 sudo export OPENIDM_OPTS="-Xms4096m -Xmx4096m"
 sudo nohup /app/forgerock/install/openidm/startup.sh   > logs/console.out 2>&1&
 sudo sleep 60
 sudo /app/forgerock/install/openidm/shutdown.sh  
 sudo cp #{software_folder_server}openidm.service /etc/systemd/system/
 sudo systemctl enable openidm
 sudo systemctl start openidm
 sudo sleep 60
 sudo systemctl stop openidm

 #2. Configure IDM to trust DS cert
 sudo keytool -import -file #{secret_location}ds-cert.pem -alias ds-cert -keystore #{install_location}openidm/security/truststore  -storepass:file #{install_location}openidm/security/storepass -noprompt


 #3. REPLACE THE REPO.DS FILE
 sudo cp #{software_folder_server}repo.ds.json #{install_location}openidm/conf/

 # Install jq if not already installed
    if ! command -v jq &> /dev/null; then
      sudo apt-get update
      sudo apt-get install -y jq
    fi

     #5.  Remove password encryption using jq from managed.json
    sudo jq '(.objects[] | select(.name == "user").schema.properties.password) |= del(.encryption)' #{install_location}openidm/conf/managed.json > #{install_location}openidm/conf/managed-updated.json &&
    sudo cp  #{install_location}openidm/conf/managed-updated.json #{install_location}openidm/conf/managed.json
   # Update managed.json with jq

    #6. from managed.json Update the password property to ensure that users update their passwords through the self-service APIs, not directly: "userEditable" : false
    sudo jq '(.objects[] | select(.name == "user").schema.properties.password.userEditable) = false' #{install_location}openidm/conf/managed.json > #{install_location}openidm/conf/managed-updated.json &&
    sudo mv #{install_location}openidm/conf/managed-updated.json #{install_location}openidm/conf/managed.json
    
   # 8. Add cn and aliasList properties to user object's properties and update order array
  #  Define the path to managed.json (adjust path as needed)
    MANAGED_JSON="#{install_location}openidm/conf/managed.json"

   # Add cn and aliasList properties to user object's properties and update order array
   jq '
   # Add new properties
   .objects[0].schema.properties += {
     "cn": {
       "title": "Common Name",
       "description": "Common Name",
       "viewable": true,
       "type": "string",
       "searchable": true,
       "userEditable": true,
       "usageDescription": "",
       "isPersonal": true,
       "policies": [
         {
           "policyId": "minimum-length",
           "params": {
             "minLength": 1
           }
         },
         {
           "policyId": "maximum-length",
           "params": {
             "maxLength": 255
           }
         }
       ]
     },
     "aliasList": {
       "title": "User Alias Names List",
       "description": "List of identity aliases used primarily to record social IdP subjects for this user",
       "type": "array",
       "items": {
         "type": "string",
         "title": "User Alias Names Items"
       },
       "viewable": false,
       "searchable": false,
       "userEditable": true,
       "returnByDefault": false,
       "isVirtual": false
     }
   } |
   # Add cn after sn and aliasList after cn in order array
   .objects[0].schema.order |= (
     .[0:(index("sn") + 1)] + ["cn", "aliasList"] + .[(index("sn") + 1):]
   )
 ' "$MANAGED_JSON" > tmp.json && mv tmp.json "$MANAGED_JSON"
    #8. Authenticate updating the authentication.json

    # copy the dowloaded file
     sudo  cp #{software_folder_server}authentication.json #{install_location}openidm/conf/authentication.json
    # Define the path to authentication.json (adjust path as needed)
    AUTH_JSON=#{install_location}openidm/conf/authentication.json

    # Replace clientSecret value
    jq '
      .rsFilter.clientSecret = "&{rs.client.secret|#{openidm_client_secret}}"  
    ' "$AUTH_JSON" > tmp.json && mv tmp.json "$AUTH_JSON"
    #9. updating the configuration file --> not working
    # Define the path to ui-configuration.json (adjust path as needed)
    UI_CONFIG_JSON=#{install_location}openidm/conf/ui-configuration.json

    # Add platformSettings to configuration object
    jq '
      .configuration += {
        "platformSettings": {
          "adminOauthClient": "idm-admin-ui",
          "adminOauthClientScopes": "fr:idm:*",
          "amUrl": "http://am.example.com:8081/am",
          "loginUrl": ""
        }
      }
    ' "$UI_CONFIG_JSON" > tmp.json && mv tmp.json "$UI_CONFIG_JSON"

    #11. Replacing the ui-themerealm.json  --> working
    sudo  cp #{software_folder_server}ui-themerealm.json  #{install_location}openidm/conf/
    
    #12. updating access.json --> working
    #cp #{install_location}openidm/conf/access.json #{tmp_location}access.json.bak
    # # Update access.json with jq to add the new config  
    jq '.configs += [{
        "pattern": "config/ui/themerealm",
        "roles": "*",
        "methods": "read",
        "actions": "*"
    }]' #{install_location}openidm/conf/access.json > #{tmp_location}access-updated.json &&
    mv #{tmp_location}access-updated.json #{install_location}openidm/conf/access.json

    #12. replacing  a servletfilter-cors.json
    sudo  cp #{software_folder_server}servletfilter-cors.json  #{install_location}openidm/conf/
    #10. start openidm
    sudo systemctl start openidm
 ##################################################################### 
   SHELL
end
