# -*- mode: ruby -*-
# vi: set ft=ruby :

def read_properties(file_path)
  properties = {}
  File.foreach(file_path) do |line|
    next if line.strip.empty? || line.start_with?('#') # Skip comments and empty lines
    key, value = line.strip.split('=', 2)
    properties[key] = value
  end
  properties
end

# Path to the properties file
properties_file = File.expand_path("config.properties", __dir__)

# Read the properties file and store the result in the `properties` variable
properties = read_properties(properties_file)


#Reading Server details
platform_ip_address = properties['platform_ip_address']
software_folder_local = properties['software_folder_local']
software_folder_server = properties['software_folder_server']
server_cpu = properties['server_cpu']
server_memory = properties['server_memory']
sleep_time = properties['sleep_time']
sleep_time_long = properties['sleep_time_long']


#Directories to be used for deployment.
install_location = properties['install_locaion']
secret_location = properties['secret_location']
tmp_location = properties['tmp_location']
ldap_instance = properties['ldap_instance']
am_instance = properties['am_instance']
tools_location = properties['tools_location']



#Software versions
ig_version = properties['ig_version']
idm_version = properties['idm_version']
tomcat_version = properties['tomcat_version']
am_version = properties['am_version']
ds_version = properties['ds_version']
JAVA_HOME = properties['JAVA_HOME']
AM_CONFIGURATION_TOOL = properties['AM_CONFIGURATION_TOOL']
AM_CONFIGURATION_TOOL_JAR = properties['AM_CONFIGURATION_TOOL_JAR']


#Secrets 
DS_Deployment_password = properties['DS_Deployment_password']
Secret_file = properties['secret_file'] 
DS_admin_password = properties['DS_admin_password']  
DS_client_password = properties['DS_client_password']
am_trust_store = properties['am_trust_store']
am_trust_store_password = properties['am_trust_store_password']
am_password = properties['am_password']
openidm_client_secret = properties['openidm_client_secret']




#Hostnames
DS_hostname = properties['DS_hostname']
AM_hostname = properties['AM_hostname']


#ldap config details
Admin_port = properties['Admin_port']
Ldap_port = properties['Ldap_port']
Ldaps_port = properties['Ldaps_port']

#AM Configuration
sub_realm = properties['sub_realm']


# Access variables from the properties file
#server details
idm_hostname = properties['idm_hostname']
idm_server_cpu = properties['idm_server_cpu']
idm_server_memory = properties['idm_server_memory']
software_folder_local = properties['software_folder_local']
software_folder_server = properties['software_folder_server']
idm_ip_address = properties['idm_ip_address']

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/jammy64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
   config.vm.network "private_network", ip: platform_ip_address

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
   config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
   config.vm.synced_folder software_folder_local, software_folder_server

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = server_memory
     vb.cpus  =  server_cpu
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
   #SHELL
    # config.vm.provision "shell", path: "scripts/prequisite/prequisite.sh"
    # config.vm.provision "shell", path: "scripts/ds/ds.sh"
    # config.vm.provision "shell", path: "scripts/am/tomcat.sh"
    # config.vm.provision "shell", path: "scripts/am/am.sh"
    # config.vm.provision "shell", path: "scripts/idm/idm.sh"
    # config.vm.provision "shell", path: "scripts/ig/ig.sh"

  config.vm.provision "shell", inline: <<-SHELL
    #  # Source the first script that gets the token
    # . /vagrant/scripts/am/AM-platform/login.sh
     
    #  # Add external CTS store 
    #  /vagrant/scripts/am/AM-platform/system/AddCTS.sh

    #  #Authenticate after changing CTS store.
    #  . /vagrant/scripts/am/AM-platform/login.sh

    #  #Create Alpha realm
    #  /vagrant/scripts/am/AM-platform/system/createAlphaRealm.sh

    #  #Update scope for ds store in sub realm
    #  /vagrant/scripts/am/AM-platform/system/DS_set_SCOPE_ONE.sh

    #  #Update scope for ds store in sub realm
    #  /vagrant/scripts/am/AM-platform/system/ds-update-seach.sh
     
    #  #ds delete in root realm
    #  /vagrant/scripts/am/AM-platform/system/ds-delete-root.sh
     
    #  ## Create clients in root   
    #  /vagrant/scripts/am/AM-platform/Oauth/create/root/idm-resource-server.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/create/root/idm-provisioning.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/create/root/idm-admin-ui.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/create/root/end-user-ui.sh

    #  ## Create clients in alpha
    #  /vagrant/scripts/am/AM-platform/Oauth/create/alpha/idm-provisioning.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/create/alpha/idm-admin-ui.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/create/alpha/end-user-ui.sh

    #  ## update clients in alpha
    #  /vagrant/scripts/am/AM-platform/Oauth/update/alpha/idm-provisioning.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/alpha/idm-admin-ui-Public.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/alpha/idm-admin-ui-Implicit.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/alpha/end-user-ui-pub.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/alpha/end-user-ui-adv.sh

    #  #update client in root
    #  /vagrant/scripts/am/AM-platform/Oauth/update/root/idm-provisioning.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/root/idm-admin-ui-Public.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/root/idm-admin-ui-Implicit.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/root/end-user-ui-pub.sh
    #  /vagrant/scripts/am/AM-platform/Oauth/update/root/end-user-ui-adv.sh


    #  ##Creating services in root realm
    #  /vagrant/scripts/am/AM-platform/services/root/create/providers.sh

    #  ##Creating services in alpha realm
    #  /vagrant/scripts/am/AM-platform/services/alpha/create/providers.sh
    #  /vagrant/scripts/am/AM-platform/services/alpha/create/validationService.sh

    #  ##Updating services in root realm
    #  /vagrant/scripts/am/AM-platform/services/root/update/providers.sh

    #  ##Updating services in alpha realm
    #  /vagrant/scripts/am/AM-platform/services/alpha/update/providers.sh

    #  ##AM System settings
    #  /vagrant/scripts/am/AM-platform/system/IDMprovisioning.sh
    #  /vagrant/scripts/am/AM-platform/system/createCross.sh
    #  /vagrant/scripts/am/AM-platform/system/updateCross.sh
     
    #  ##Configuring IDM for Platform Setup
    #  /vagrant/scripts/idm/checkIDMStatus.sh
    # /vagrant/scripts/idm/idmPlatformConf.sh

    # #Confgiuring IG for Platform
    # /vagrant/scripts/ig/add_route.sh
    # . /vagrant/scripts/am/AM-platform/login.sh
    # /vagrant/scripts/am/AM-platform/Oauth/update/alpha/end-user-ui-platform.sh
    # /vagrant/scripts/am/AM-platform/Oauth/update/root/end-user-ui-platform.sh
    # /vagrant/scripts/am/AM-platform/Oauth/update/alpha/idm-admin-ui-platform.sh
    # /vagrant/scripts/am/AM-platform/Oauth/update/root/idm-admin-ui-platform.sh
    # /vagrant/scripts/am/AM-platform/services/root/update/ExternalLoginPageURL.sh
    # /vagrant/scripts/am/AM-platform/services/alpha/update/ExternalLoginPageURL.sh
    # /vagrant/scripts/am/AM-platform/services/root/create/validationService.sh
    # /vagrant/scripts/am/AM-platform/services/root/create/BaseURLSource.sh
    # /vagrant/scripts/am/AM-platform/services/alpha/create/BaseURLSource.sh
    # /vagrant/scripts/am/AM-platform/services/root/update/BaseURLSource.sh
    # /vagrant/scripts/am/AM-platform/services/alpha/update/BaseURLSource.sh
    # /vagrant/scripts/am/AM-platform/services/alpha/update/validationService.sh
    # /vagrant/scripts/idm/update-ui-configuration_platform.sh
    /vagrant/scripts/platform/docker.sh
 
   SHELL

end